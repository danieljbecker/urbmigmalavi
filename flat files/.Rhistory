chain=1,iter=3000,thin=1,warmup=1500,
data=cdata$data,family=poisson,
data2=list(A=cmatrix))
## load in paco results
#setwd("~/Desktop/urbmigmalavi/flat files")
setwd("/Users/taylorverrett/Documents/GitHub/urbmigmalavi/flat files")
rdata=read.csv("PACo results_passerines.csv")
rdata$X=NULL
## merge with traits
rdata=merge(rdata,data,by="tiplab",all.x=T)
#cdata with paco data for pgls
cdata=comparative.data(phy=htree,data=rdata,names.col=label,vcv=T,na.omit=F,warn.dropped=T)
## clean environment & plots
rm(list=ls())
function (..., list = character(), package = NULL, lib.loc = NULL,
verbose = getOption("verbose"), envir = .GlobalEnv, overwrite = TRUE)
{
fileExt <- function(x) {
db <- grepl("\\.[^.]+\\.(gz|bz2|xz)$", x)
ans <- sub(".*\\.", "", x)
ans[db] <- sub(".*\\.([^.]+\\.)(gz|bz2|xz)$", "\\1\\2",
x[db])
ans
}
my_read_table <- function(...) {
lcc <- Sys.getlocale("LC_COLLATE")
on.exit(Sys.setlocale("LC_COLLATE", lcc))
Sys.setlocale("LC_COLLATE", "C")
read.table(...)
}
stopifnot(is.character(list))
names <- c(as.character(substitute(list(...))[-1L]), list)
if (!is.null(package)) {
if (!is.character(package))
stop("'package' must be a character vector or NULL")
}
paths <- find.package(package, lib.loc, verbose = verbose)
if (is.null(lib.loc))
paths <- c(path.package(package, TRUE), if (!length(package)) getwd(),
paths)
paths <- unique(normalizePath(paths[file.exists(paths)]))
paths <- paths[dir.exists(file.path(paths, "data"))]
dataExts <- tools:::.make_file_exts("data")
if (length(names) == 0L) {
db <- matrix(character(), nrow = 0L, ncol = 4L)
for (path in paths) {
entries <- NULL
packageName <- if (file_test("-f", file.path(path,
"DESCRIPTION")))
basename(path)
else "."
if (file_test("-f", INDEX <- file.path(path, "Meta",
"data.rds"))) {
entries <- readRDS(INDEX)
}
else {
dataDir <- file.path(path, "data")
entries <- tools::list_files_with_type(dataDir,
"data")
if (length(entries)) {
entries <- unique(tools::file_path_sans_ext(basename(entries)))
entries <- cbind(entries, "")
}
}
if (NROW(entries)) {
if (is.matrix(entries) && ncol(entries) == 2L)
db <- rbind(db, cbind(packageName, dirname(path),
entries))
else warning(gettextf("data index for package %s is invalid and will be ignored",
sQuote(packageName)), domain = NA, call. = FALSE)
}
}
colnames(db) <- c("Package", "LibPath", "Item", "Title")
footer <- if (missing(package))
paste0("Use ", sQuote(paste("data(package =", ".packages(all.available = TRUE))")),
"\n", "to list the data sets in all *available* packages.")
else NULL
y <- list(title = "Data sets", header = NULL, results = db,
footer = footer)
class(y) <- "packageIQR"
return(y)
}
paths <- file.path(paths, "data")
for (name in names) {
found <- FALSE
for (p in paths) {
tmp_env <- if (overwrite)
envir
else new.env()
if (file_test("-f", file.path(p, "Rdata.rds"))) {
rds <- readRDS(file.path(p, "Rdata.rds"))
if (name %in% names(rds)) {
found <- TRUE
if (verbose)
message(sprintf("name=%s:\t found in Rdata.rds",
name), domain = NA)
thispkg <- sub(".*/([^/]*)/data$", "\\1",
p)
thispkg <- sub("_.*$", "", thispkg)
thispkg <- paste0("package:", thispkg)
objs <- rds[[name]]
lazyLoad(file.path(p, "Rdata"), envir = tmp_env,
filter = function(x) x %in% objs)
break
}
else if (verbose)
message(sprintf("name=%s:\t NOT found in names() of Rdata.rds, i.e.,\n\t%s\n",
name, paste(names(rds), collapse = ",")),
domain = NA)
}
if (file_test("-f", file.path(p, "Rdata.zip"))) {
warning("zipped data found for package ", sQuote(basename(dirname(p))),
".\nThat is defunct, so please re-install the package.",
domain = NA)
if (file_test("-f", fp <- file.path(p, "filelist")))
files <- file.path(p, scan(fp, what = "",
quiet = TRUE))
else {
warning(gettextf("file 'filelist' is missing for directory %s",
sQuote(p)), domain = NA)
next
}
}
else {
files <- list.files(p, full.names = TRUE)
}
files <- files[grep(name, files, fixed = TRUE)]
if (length(files) > 1L) {
o <- match(fileExt(files), dataExts, nomatch = 100L)
paths0 <- dirname(files)
paths0 <- factor(paths0, levels = unique(paths0))
files <- files[order(paths0, o)]
}
if (length(files)) {
for (file in files) {
if (verbose)
message("name=", name, ":\t file= ...",
.Platform$file.sep, basename(file), "::\t",
appendLF = FALSE, domain = NA)
ext <- fileExt(file)
if (basename(file) != paste0(name, ".", ext))
found <- FALSE
else {
found <- TRUE
zfile <- file
zipname <- file.path(dirname(file), "Rdata.zip")
if (file.exists(zipname)) {
Rdatadir <- tempfile("Rdata")
dir.create(Rdatadir, showWarnings = FALSE)
topic <- basename(file)
rc <- .External(C_unzip, zipname, topic,
Rdatadir, FALSE, TRUE, FALSE, FALSE)
if (rc == 0L)
zfile <- file.path(Rdatadir, topic)
}
if (zfile != file)
on.exit(unlink(zfile))
switch(ext, R = , r = {
library("utils")
sys.source(zfile, chdir = TRUE, envir = tmp_env)
}, RData = , rdata = , rda = load(zfile,
envir = tmp_env), TXT = , txt = , tab = ,
tab.gz = , tab.bz2 = , tab.xz = , txt.gz = ,
txt.bz2 = , txt.xz = assign(name, my_read_table(zfile,
header = TRUE, as.is = FALSE), envir = tmp_env),
CSV = , csv = , csv.gz = , csv.bz2 = ,
csv.xz = assign(name, my_read_table(zfile,
header = TRUE, sep = ";", as.is = FALSE),
envir = tmp_env), found <- FALSE)
}
if (found)
break
}
if (verbose)
message(if (!found)
"*NOT* ", "found", domain = NA)
}
if (found)
break
}
if (!found) {
warning(gettextf("data set %s not found", sQuote(name)),
domain = NA)
}
else if (!overwrite) {
for (o in ls(envir = tmp_env, all.names = TRUE)) {
if (exists(o, envir = envir, inherits = FALSE))
warning(gettextf("an object named %s already exists and will not be overwritten",
sQuote(o)))
else assign(o, get(o, envir = tmp_env, inherits = FALSE),
envir = envir)
}
rm(tmp_env)
}
}
invisible(names)
}
## clean environment & plots
rm(list=ls())
graphics.off()
gc()
## libraries
library(ape)
library(caper)
library(reshape2)
library(ggplot2)
library(brms)
library(bayestestR)
library(lme4)
## load in MalAvi with traits
#setwd("~/Desktop/urbmigmalavi/flat files")
setwd("/Users/taylorverrett/Documents/GitHub/urbmigmalavi/flat files")
data=read.csv("MalAvi hosts with traits_cleaned_Passeriformes.csv")
## load in citations
cdata=read.csv("urbmigmalavi host citations.csv")
cdata$X=NULL
## merge
data=merge(data,cdata,by="tip")
rm(cdata)
## log cites
data$lcites=log1p(data$cites)
## get lineage richness
data$richness=sapply(strsplit(data$lineages,", "),function(x) length(unique(x)))
## urban, human, and migration as factors
data$urban=factor(data$urban)
data$humanDisturbed=factor(data$humanDisturbed)
data$Migration=factor(data$Migration)
## load BirdTree
#setwd("/Users/danielbecker/Desktop/urbmigmalavi/BirdTree")
setwd("/Users/taylorverrett/Documents/GitHub/urbmigmalavi/BirdTree")
htree=readRDS("BirdTree 2K tree consensus.rds")
## make tip label
data$tiplab=data$TipLabel
## trim to species in edgelist
setdiff(data$tiplab,htree$tip.label)
htree=keep.tip(htree,unique(data$tiplab))
View(htree)
htree[["tip.label"]]
## make label
data$label=data$tiplab
## observation
data$obs=factor(1:nrow(data))
## merge
cdata=comparative.data(phy=htree,data=data,names.col=label,vcv=T,na.omit=F,warn.dropped=T)
## relabel
cdata$data$label=cdata$data$tiplab
## vis richness
ggplot(cdata$data[!is.na(cdata$data$urban),],
aes(urban,richness,fill=Migration))+geom_boxplot()+scale_y_log10()
cmatrix=vcv.phylo(cdata$phy,cor=T)
options(buildtools.check = function(action) TRUE)
## load in paco results
#setwd("~/Desktop/urbmigmalavi/flat files")
setwd("/Users/taylorverrett/Documents/GitHub/urbmigmalavi/flat files")
rdata=read.csv("PACo results_passerines.csv")
rdata$X=NULL
rdata=merge(rdata,data,by="tiplab",all.x=T)
cdata=comparative.data(phy=htree,data=rdata,names.col=label,vcv=T,na.omit=F,warn.dropped=T)
View(rdata)
View(rdata)
## MalAvi, urbanization, migration
## 03_cophylo
## danbeck@ou.edu
## last updated 4/4/2023
## clean environment & plots
rm(list=ls())
graphics.off()
gc()
## libraries
library(ape)
library(caper)
library(reshape2)
library(ggplot2)
library(paco)
library(Rtapas)
## load edgelist
#setwd("~/Desktop/urbmigmalavi/flat files")
setwd("/Users/taylorverrett/Documents/GitHub/urbmigmalavi/flat files")
edge=read.csv("sparrows only MalAvi edgelist.csv")
## load BirdTree
#setwd("/Users/danielbecker/Desktop/urbmigmalavi/BirdTree")
setwd("/Users/taylorverrett/Documents/GitHub/urbmigmalavi/BirdTree")
htree=readRDS("BirdTree 2K tree consensus.rds")
## make tip label
edge$tiplab=gsub(" ","_",edge$tip)
## trim to species in edgelist
setdiff(edge$tiplab,htree$tip.label)
htree=keep.tip(htree,unique(edge$tiplab))
## load MalAvi phylogeny
#setwd("/Users/danielbecker/Desktop/urbmigmalavi/MalAvi phylo")
setwd("/Users/taylorverrett/Documents/GitHub/urbmigmalavi/MalAvi phylo")
ptree=read.nexus("Malavi working sequences 04.05.2023 with outgroup and Bayes block.nex.con.tre")
## check correct match
spec=unique(edge$Lineage_Name)
ptree=keep.tip(ptree,spec)
rm(spec)
## make a H-P association matrix
hptab=with(edge,table(tiplab,Lineage_Name))
hptab=table(edge$tiplab,edge$Lineage_Name)
## binary
hptab=ifelse(hptab>0,1,0)
# melt and visualize the matrix (computationally taxing)
hptab_melt=melt(hptab)
names(hptab_melt)=c("tiplab","Lineage_Name","value")
ggplot(hptab_melt,aes(tiplab,Lineage_Name))+
geom_tile(aes(fill=value))+
scale_fill_gradient(low="wheat1",high="steelblue")+
theme_bw()+
coord_flip()+
theme(axis.text=element_blank(),
axis.title=element_blank())+
guides(fill=F)
## phylogenetic distances for host and parasite
htree_dist=cophenetic.phylo(htree)
ptree_dist=cophenetic.phylo(ptree)
## check
length(colnames(htree_dist))==length(unique(edge$tiplab))
length(colnames(ptree_dist))==length(unique(edge$Lineage_Name))
# ## Rtapas setup
# N=100
# nset=one2one_f(hptab,reps=N,interval=c(1,10),plot=T)
# pmax=max_cong(HS=hptab,
#               treeH=htree,
#               treeS=ptree,
#               n=nset,
#               N=N,
#               method="paco")
#
# ## simple tangelgram
# tangle_gram(treeH=htree,
#             treeS=ptree,
#             HS=hptab,
#             fqtab=pmax,
#             colscale="diverging",
#             colgrad=viridis(10))
## parafit
# set.seed(1)
# pfit=parafit(host.D=htree_dist,para.D=ptree_dist,HP=hptab,
#              correction="cailliez",nperm=10,test.links=TRUE)
## paco
D=prepare_paco_data(H=htree_dist,P=ptree_dist,HP=hptab)
D=add_pcoord(D,correction="cailliez")
pac=PACo(D,nperm=999,seed=1,method="r0",symmetric=F) ## assumes column group tracks row group
## clean environment & plots
rm(list=ls())
graphics.off()
gc()
## libraries
library(ape)
library(caper)
library(reshape2)
library(ggplot2)
library(brms)
library(bayestestR)
library(lme4)
## load in MalAvi with traits
#setwd("~/Desktop/urbmigmalavi/flat files")
setwd("/Users/taylorverrett/Documents/GitHub/urbmigmalavi/flat files")
data=read.csv("MalAvi hosts with traits_cleaned_Passeriformes.csv")
## load in citations
cdata=read.csv("urbmigmalavi host citations.csv")
cdata$X=NULL
## merge
data=merge(data,cdata,by="tip")
rm(cdata)
## log cites
data$lcites=log1p(data$cites)
## get lineage richness
data$richness=sapply(strsplit(data$lineages,", "),function(x) length(unique(x)))
## urban, human, and migration as factors
data$urban=factor(data$urban)
data$humanDisturbed=factor(data$humanDisturbed)
data$Migration=factor(data$Migration)
## load BirdTree
#setwd("/Users/danielbecker/Desktop/urbmigmalavi/BirdTree")
setwd("/Users/taylorverrett/Documents/GitHub/urbmigmalavi/BirdTree")
htree=readRDS("BirdTree 2K tree consensus.rds")
## make tip label
data$tiplab=data$TipLabel
## trim to species in edgelist
setdiff(data$tiplab,htree$tip.label)
htree=keep.tip(htree,unique(data$tiplab))
## make label
data$label=data$tiplab
## observation
data$obs=factor(1:nrow(data))
## merge
cdata=comparative.data(phy=htree,data=data,names.col=label,vcv=T,na.omit=F,warn.dropped=T)
## relabel
cdata$data$label=cdata$data$tiplab
## compute correlation matrix
cmatrix=vcv.phylo(cdata$phy,cor=T)
## disable
options(buildtools.check = function(action) TRUE)
## load in paco results
#setwd("~/Desktop/urbmigmalavi/flat files")
setwd("/Users/taylorverrett/Documents/GitHub/urbmigmalavi/flat files")
rdata=read.csv("PACo results_passerines.csv")
rdata$X=NULL
## merge with traits
rdata=merge(rdata,data,by="tiplab",all.x=T)
#average jackknife per species
collapsed_values <- tapply(rdata$jackknife, rdata$tiplab, mean)
#collapse species links into average
collapsed_rdata <- data.frame(tiplab = unique(rdata$tiplab),
avg_jackknife = collapsed_values)
View(collapsed_rdata)
avg_jackknife <- data.frame(tiplab = unique(rdata$tiplab),
avg_jackknife = collapsed_values)
collapsed_rdata=merge(rdata,avg_jackknife,by="tiplab",all.x=T)
View(collapsed_rdata)
## merge with traits
rdata=merge(rdata,data,by="tiplab",all.x=T)
collapsed_values <- tapply(rdata$jackknife, rdata$tiplab, mean)
rdata$tiplab
avg_jackknife <- data.frame(tiplab = unique(rdata$tiplab)
)
avg_jackknife <- data.frame(tiplab = unique(rdata$tiplab),
avg_jackknife = collapsed_values)
View(avg_jackknife)
rdata=merge(rdata,collapsed_values,by="tiplab",all.x=T)
rdata$collapsed_values <- tapply(rdata$jackknife, rdata$tiplab, mean)
unique_rdata <- rdata %>%
distinct(tiplab)
## load in paco results
#setwd("~/Desktop/urbmigmalavi/flat files")
setwd("/Users/taylorverrett/Documents/GitHub/urbmigmalavi/flat files")
rdata=read.csv("PACo results_passerines.csv")
rdata$X=NULL
## merge with traits
rdata=merge(rdata,data,by="tiplab",all.x=T)
#average jackknife per species
collapsed_values <- tapply(rdata$jackknife, rdata$tiplab, mean)
#collapse species links into average
collapsed_rdata <- data.frame(tiplab = unique(rdata$tiplab),
avg_jackknife = collapsed_values)
View(collapsed_rdata)
## clean environment & plots
rm(list=ls())
graphics.off()
gc()
## libraries
library(ape)
library(caper)
library(reshape2)
library(ggplot2)
library(brms)
library(bayestestR)
library(lme4)
## load in MalAvi with traits
#setwd("~/Desktop/urbmigmalavi/flat files")
setwd("/Users/taylorverrett/Documents/GitHub/urbmigmalavi/flat files")
data=read.csv("MalAvi hosts with traits_cleaned_Passeriformes.csv")
## load in citations
cdata=read.csv("urbmigmalavi host citations.csv")
cdata$X=NULL
## merge
data=merge(data,cdata,by="tip")
rm(cdata)
## log cites
data$lcites=log1p(data$cites)
## get lineage richness
data$richness=sapply(strsplit(data$lineages,", "),function(x) length(unique(x)))
## urban, human, and migration as factors
data$urban=factor(data$urban)
data$humanDisturbed=factor(data$humanDisturbed)
data$Migration=factor(data$Migration)
## load BirdTree
#setwd("/Users/danielbecker/Desktop/urbmigmalavi/BirdTree")
setwd("/Users/taylorverrett/Documents/GitHub/urbmigmalavi/BirdTree")
htree=readRDS("BirdTree 2K tree consensus.rds")
## make tip label
data$tiplab=data$TipLabel
## trim to species in edgelist
setdiff(data$tiplab,htree$tip.label)
htree=keep.tip(htree,unique(data$tiplab))
## make label
data$label=data$tiplab
## observation
data$obs=factor(1:nrow(data))
## merge
cdata=comparative.data(phy=htree,data=data,names.col=label,vcv=T,na.omit=F,warn.dropped=T)
## relabel
cdata$data$label=cdata$data$tiplab
## vis richness
ggplot(cdata$data[!is.na(cdata$data$urban),],
aes(urban,richness,fill=Migration))+geom_boxplot()+scale_y_log10()
## compute correlation matrix
cmatrix=vcv.phylo(cdata$phy,cor=T)
## disable
options(buildtools.check = function(action) TRUE)
## load in paco results
#setwd("~/Desktop/urbmigmalavi/flat files")
setwd("/Users/taylorverrett/Documents/GitHub/urbmigmalavi/flat files")
rdata=read.csv("PACo results_passerines.csv")
rdata$X=NULL
## merge with traits
rdata=merge(rdata,data,by="tiplab",all.x=T)
View(rdata)
#average jackknife per species
collapsed_values <- tapply(rdata$jackknife, rdata$tiplab, mean)
#collapse species links into average
collapsed_rdata <- data.frame(tiplab = unique(rdata$tiplab),
avg_jackknife = collapsed_values)
rm(collapsed_rdata)
collapsed_rdata <- rdatadata %>%
group_by(tiplab) %>%
summarize(mean_jackknife = mean(jackknife))
collapsed_rdata <- rdata %>%
group_by(tiplab) %>%
summarize(mean_jackknife = mean(jackknife))
View(collapsed_rdata)
